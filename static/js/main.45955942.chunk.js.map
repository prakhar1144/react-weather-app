{"version":3,"sources":["components/Weather.js","components/Form.js","App.js","reportWebVitals.js","index.js"],"names":["maxmin","max","min","className","Weather","props","city","icon","temp","text","Form","submit","onSubmit","name","type","placeholder","App","useState","City","setCity","undefined","setTemp","setMax","setMin","setText","setIcon","cityName","useEffect","fetch","then","response","ok","Error","json","data","main","temp_max","temp_min","weather","description","Math","floor","id","catch","error","alert","e","preventDefault","cityInput","target","elements","value","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qMAwBMA,EAAS,SAACC,EAAKC,GACjB,OACI,sBAAKC,UAAU,sBAAf,UACI,uBAAMA,UAAU,OAAhB,mBACWF,EADX,UAGA,uBAAME,UAAU,OAAhB,mBACWD,EADX,cAOGE,EAnCC,SAACC,GASb,OACA,sBAAKF,UAAU,oBAAf,UACI,oBAAIA,UAAU,cAAd,SAA6BE,EAAMC,OACnC,oBAAIH,UAAU,mBAAd,SACI,mBAAGA,UAAS,uBAZN,CACV,EAAE,kBACF,EAAE,cACF,EAAE,UACF,EAAE,UACF,EAAE,WACF,EAAE,aAMsCE,EAAME,WAE9C,qBAAIJ,UAAU,mBAAd,UAAkCE,EAAMG,KAAxC,UACCR,EAAOK,EAAMJ,IAAKI,EAAMH,KACzB,oBAAIC,UAAU,mBAAd,SAAkCE,EAAMI,WCFjCC,G,MAjBF,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACX,OACI,qBAAKR,UAAU,YAAf,SACI,sBAAMS,SAAUD,EAAhB,SACI,sBAAKR,UAAU,kCAAf,UACI,qBAAKA,UAAU,WAAf,SACI,uBAAOU,KAAK,OAAOV,UAAU,eAAeW,KAAK,OAAOC,YAAY,YAAY,aAAW,aAE/F,qBAAKZ,UAAU,oCAAf,SACI,wBAAQA,UAAU,kBAAkBW,KAAK,SAAzC,+BCkDTE,MApDf,WAEE,MAAwBC,mBAAS,SAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAwBF,wBAASG,GAAjC,mBAAOZ,EAAP,KAAaa,EAAb,KACA,EAAsBJ,wBAASG,GAA/B,mBAAOnB,EAAP,KAAYqB,EAAZ,KACA,EAAsBL,wBAASG,GAA/B,mBAAOlB,EAAP,KAAYqB,EAAZ,KACA,EAAwBN,wBAASG,GAAjC,mBAAOX,EAAP,KAAae,EAAb,KACA,EAAwBP,wBAASG,GAAjC,mBAAOb,EAAP,KAAakB,EAAb,KAUMC,EAAWR,EAoBjB,OAnBAS,qBAAU,WACRC,MAAM,qDAAsDF,EAAU,wDACrEG,MAAK,SAACC,GACL,IAAIA,EAASC,GAAK,MAAMC,MAAM,qBAC9B,OAAOF,EAASG,UAEjBJ,MAAK,SAACK,GACLb,EAAQa,EAAKC,KAAK3B,MAClBc,EAAOY,EAAKC,KAAKC,UACjBb,EAAOW,EAAKC,KAAKE,UACjBb,EAAQU,EAAKI,QAAQ,GAAGC,aACxBd,EAAQe,KAAKC,MAAMP,EAAKI,QAAQ,GAAGI,GAAG,SAEvCC,OAAM,SAACC,GACNC,MAAMD,GACNzB,EAAQ,cAEV,CAACD,IAGD,sBAAKf,UAAU,gBAAf,UACE,cAAC,EAAD,CAAMQ,OA9BK,SAACmC,GACdA,EAAEC,iBACF,IAAMC,EAAYF,EAAEG,OAAOC,SAAS5C,KAAK6C,MAEzB,KAAZH,EACJ7B,EAAQ6B,GADaH,MAAM,sBA2BzB,cAAC,EAAD,CACEvC,KAAMY,EACNV,KAAMA,EACNP,IAAKA,EACLC,IAAKA,EACLO,KAAMA,EACNF,KAAMA,QCzCC6C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBzB,MAAK,YAAkD,IAA/C0B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.45955942.chunk.js","sourcesContent":["import \"weather-icons/css/weather-icons.css\"\n\nconst Weather = (props) => {\n    const icons = {\n        2:'wi-thunderstorm',\n        3:'wi-sprinkle',\n        5:'wi-rain',\n        6:'wi-snow',\n        7:'wi-smoke',\n        8:'wi-cloudy',\n    }\n    return (\n    <div className=\"container py-md-5\">\n        <h1 className=\"text-center\">{props.city}</h1>\n        <h5 className=\"py-4 text-center\">\n            <i className={`wi display-1 ${icons[props.icon]}`}></i>\n        </h5>\n        <h1 className=\"py-2 text-center\">{props.temp}&deg;</h1>\n        {maxmin(props.max, props.min)}\n        <h3 className=\"py-3 text-center\">{props.text}</h3>\n    </div>\n    );\n}\n\nconst maxmin = (max, min) => {\n    return (\n        <div className=\"text-center py-md-4\">\n            <span className=\"px-4\">\n                Max : {max}&deg;\n            </span>\n            <span className=\"px-4\">\n                Min : {min}&deg;\n            </span>\n        </div>\n    )\n}\n\nexport default Weather;","const Form = ({submit}) => {\n    return (\n        <div className=\"container\">\n            <form onSubmit={submit}>\n                <div className=\"row py-4 justify-content-center\">\n                    <div className=\"col-md-5\">\n                        <input name=\"city\" className=\"form-control\" type=\"text\" placeholder=\"City Name\" aria-label=\"Search\" />\n                    </div>\n                    <div className=\"col-md-1 text-center pt-2 pt-md-0\">\n                        <button className=\"btn btn-success\" type=\"submit\">Search</button>\n                    </div>\n                </div>\n            </form>\n        </div>\n    )\n}\n\nexport default Form","import {useState, useEffect} from 'react'\nimport Weather from './components/Weather';\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nimport Form from './components/Form';\n\n// API_KEY = \"ec1bf9f7316c92cc76873f61127a1d0a\"\n\nfunction App() {\n\n  const [City, setCity] = useState(\"Delhi\")\n  const [temp, setTemp] = useState(undefined)\n  const [max, setMax] = useState(undefined)\n  const [min, setMin] = useState(undefined)\n  const [text, setText] = useState(undefined)\n  const [icon, setIcon] = useState(undefined)\n\n  const submit = (e) => {\n    e.preventDefault()\n    const cityInput = e.target.elements.city.value\n    // console.log(cityInput)\n    if (cityInput==='') {alert(\"Enter City Name\"); return;}\n    setCity(cityInput)\n  }\n\n  const cityName = City;\n  useEffect(() => {\n    fetch('https://api.openweathermap.org/data/2.5/weather?q='+ cityName +'&units=metric&appid=ec1bf9f7316c92cc76873f61127a1d0a')\n    .then((response) => { \n      if(!response.ok) {throw Error(\"Invalid City Name\")}\n      return response.json()\n    })\n    .then((data) => {\n      setTemp(data.main.temp)\n      setMax(data.main.temp_max)\n      setMin(data.main.temp_min)\n      setText(data.weather[0].description)\n      setIcon(Math.floor(data.weather[0].id/100))\n    })\n    .catch((error)=>{\n      alert(error);\n      setCity(\"Delhi\")\n    });\n  },[City])\n\n  return (\n    <div className=\"container app\">\n      <Form submit={submit}/>\n      <Weather \n        city={City}\n        temp={temp}\n        max={max}\n        min={min}\n        text={text}\n        icon={icon}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}